package usaco;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;

import java.io.IOException;

class pos
{
	public int x;
	public int y;

	public pos(int x, int y)
	{
		this.x = x;
		this.y = y;
	}
}

public class multimoo
{
	public static dpos[][] map1;
	public static int indivcount = 0;

	public static void main(String[] args) throws IOException
	{
		BufferedReader f = new BufferedReader(new FileReader("multimoo.in"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("multimoo.out")));
		StringTokenizer st = new StringTokenizer(f.readLine());
		int size = Integer.parseInt(st.nextToken());
		map1 = new dpos[size][size];
		for (int i = 0; i < size; i++)
		{
			st = new StringTokenizer(f.readLine());
			for (int j = 0; j < size; j++)
				map1[i][j] = new dpos(Integer.parseInt(st.nextToken()), i, j);
		}
		int max = 0;
		for (int i = 0; i < size; i++)
			for (int j = 0; j < size; j++)
				if (map1[i][j].count != 0)
					max = Math.max(max, ff(i, j, map1[i][j].num));

		out.println(indivcount);
		out.println(max);
		out.close();
		f.close();
	}

	public static int ff(int x, int y, int id)
	{
		LinkedList<dpos> q = new LinkedList<>();
		q.add(new dpos(id, x, y));
		int count = 1;
		while (!q.isEmpty())
		{
			dpos curr = q.pop();
			int[] dx =
				{ 0, 0, 1, -1 };
			int[] dy =
				{ 1, -1, 0, 0 };
			for (int i = 0; i < 4; i++)
				if (curr.x + dx[i] > -1 && curr.x + dx[i] < map1.length && curr.y + dy[i] > -1
						&& curr.y + dy[i] < map1.length && map1[curr.x + dx[i]][curr.y + dy[i]].num == id)
				{
					q.add(new dpos(id, curr.x + dx[i], curr.y + dy[i]));
					count++;
				}
		}
		return count;
	}
}
